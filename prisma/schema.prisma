// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

  // Do not use foreign keys (PlanetScale does not support them)
  relationMode = "prisma"
}

model Post {
  id                  String    @id
  userId              String
  userFullName        String // ideally this would be in a user table that is synced with Clerk, however for the scope of the test we will keep it here on creation in order to satisfy the UI requirements.
  createdAt           DateTime  @default(now())
  title               String    @db.TinyText
  content             String    @db.Text
  totalVotes          Int       @default(0)
  votes               Vote[]    @relation("PostToVote")
  directChildComments Comment[] @relation("PostToComment")
  allComments         Comment[] @relation("RootPostToComment")

  @@index([userId]) // Index user ID for faster lookups for a specific user's posts
}

model Comment {
  id            String    @id
  userId        String
  userFullName  String // ideally this would be in a user table that is synced with Clerk, however for the scope of the test we will keep it here on creation in order to satisfy the UI requirements.
  rootPostId    String // ID of the top-level post, used for easier querying of all comments and children of comments under a specific post
  rootPost      Post      @relation("RootPostToComment", fields: [rootPostId], references: [id])
  parentId      String
  parentPost    Post?     @relation("PostToComment", fields: [parentId], references: [id], map: "postToComment")
  parentComment Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "commentToComment")
  createdAt     DateTime  @default(now())
  content       String    @db.Text
  totalVotes    Int       @default(0)
  votes         Vote[]    @relation("CommentToVote")
  comments      Comment[] @relation("CommentToComment")

  @@index([userId]) // Index user ID for faster lookups for a specific user's comments
  @@index([parentId]) // Index parent ID for faster lookups for a specific parents's comments
  @@index([rootPostId]) // Index root post ID for faster lookups for a specific post's comments
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  id        String   @id
  contentId String // ID of the post or comment
  userId    String
  value     VoteType
  createdAt DateTime @default(now())
  comment   Comment? @relation("CommentToVote", fields: [contentId], references: [id], map: "commentToVote")
  post      Post?    @relation("PostToVote", fields: [contentId], references: [id], map: "postToVote")

  @@unique([contentId, userId])
  @@index([contentId]) // Index content ID for faster lookups for a specific content's votes
  @@index([contentId, userId], name: "contentId_userId") // Index content ID and user ID for faster lookups for a specific user's vote on a specific comment or post
}
